// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  DONNEUR_ORDRE
  SOUS_TRAITANT
  ADMIN
  SUPER_ADMIN
}

enum DocumentType {
  ATTESTATION_VIGILANCE
  KBIS
  JUSTIFICATIF_IMMATRICULATION
  ATTESTATION_REGULARITE_FISCALE
  ATTESTATION_ASSURANCE_RC_PRO
  ATTESTATION_ASSURANCE_DECENNALE
  IBAN
  LISTE_SALARIES_ETRANGERS
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ContactRequestStatus {
  PENDING
  READ
  REPLIED
  CLOSED
}

enum TypeChantier {
  PLOMBERIE
  ELECTRICITE
  MACONNERIE
  PLAQUISTE
  CARRELAGE
  CLIMATISATION
  PEINTURE
  COUVERTURE
  MENUISERIE
  TERRASSEMENT
  AUTRE
}

enum ContactType {
  GENERAL
  SUPPORT
  COMMERCIAL
  TECHNIQUE
}

enum ContactStatus {
  NOUVEAU
  EN_COURS
  RESOLU
  FERME
  ARCHIVE
}

enum ProjetStatus {
  OUVERT
  EN_COURS
  TERMINE
  ANNULE
}

enum OffreStatus {
  EN_ATTENTE
  ACCEPTEE
  REFUSEE
  RETIREE
}

enum ModerationStatus {
  PENDING
  VALIDATED
  REJECTED
}

// Statut public de vérification affiché sur les profils
enum PublicVerificationStatus {
  VERIFIED
  PENDING
  BLOCKED
}

// Modèle principal User
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  role      Role
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Informations de base
  nom               String
  prenom            String?
  nomSociete        String?
  telephone         String
  adresse           String
  ville             String
  codePostal        String
  pays              String @default("France")

  // Spécifique aux sous-traitants
  nombreEmployes    Int?
  expertises        TypeChantier[]
  autresExpertises  String[]
  noteGlobale       Float?   @default(0)
  nombreEvaluations Int?     @default(0)

  // Relations
  documents        Document[]
  projets          Projet[]     // Projets créés (pour donneurs d'ordres)
  projetsModerated Projet[]     @relation("ProjetModerator") // Projets modérés (pour admins)
  offres           Offre[]      // Offres soumises (pour sous-traitants)
  evaluations      Evaluation[] // Évaluations reçues
  evalueDonne      Evaluation[] @relation("EvaluateurRelation") // Évaluations données
  messagesEnvoyes  Message[]    @relation("MessagesEnvoyes")
  messagesRecus    Message[]    @relation("MessagesRecus")

  // Profil public sous-traitant (1-1)
  contractorProfile ContractorProfile?
  
  // Gestion des contacts (pour admins)
  assignedContacts Contact[]
  
  // Réponses aux demandes de contact (pour admins)
  contactReponses ContactRequest[]

  @@map("users")
}

// Modèle pour les documents à vérifier
model Document {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  userId      String         @db.ObjectId
  type        DocumentType
  fileName    String
  fileUrl     String // URL Cloudinary
  publicId    String // Public ID Cloudinary pour suppression
  status      DocumentStatus @default(PENDING)
  
  // Validation admin
  validatedBy    String?   @db.ObjectId
  validatedAt    DateTime?
  rejectedReason String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// Modèle pour les projets/chantiers
model Projet {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  donneurOrdreId  String        @db.ObjectId
  titre           String
  description     String
  typeChantier    TypeChantier[]
  prixMax         Float
  dureeEstimee    Int           // En jours
  status          ProjetStatus  @default(OUVERT)
  
  // Informations du chantier
  adresseChantier String
  villeChantier   String
  codePostalChantier String
  dateDebut       DateTime
  dateFin         DateTime
  delai           DateTime      // Date limite pour postuler
  
  // Informations supplémentaires
  requisTechniques     String?
  materiaux            String?
  acces                String?
  infosAdditionnelles  String?  // Champs personnalisés ajoutés par le donneur d'ordre
  externalFilesLink    String?  // Lien externe pour les fichiers volumineux (WeTransfer, etc.)
  
  // Modération
  moderationStatus     ModerationStatus @default(PENDING)
  moderatedBy          String?          @db.ObjectId
  moderatedAt          DateTime?
  rejectionReason      String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  donneurOrdre User    @relation(fields: [donneurOrdreId], references: [id], onDelete: Cascade)
  moderator    User?   @relation("ProjetModerator", fields: [moderatedBy], references: [id])
  offres       Offre[]
  evaluations  Evaluation[]
  images       ProjectImage[]

  @@map("projets")
}

// Modèle pour les offres/candidatures
model Offre {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  projetId      String      @db.ObjectId
  sousTraitantId String     @db.ObjectId
  prixPropose   Float
  delaiPropose  Int         // En jours
  message       String?
  status        OffreStatus @default(EN_ATTENTE)
  
  // Informations supplémentaires
  experienceSimilaire String?
  materielsDisponibles String?
  equipeAssignee      String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  projet        Projet    @relation(fields: [projetId], references: [id], onDelete: Cascade)
  sousTraitant  User      @relation(fields: [sousTraitantId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@unique([projetId, sousTraitantId]) // Un sous-traitant ne peut postuler qu'une fois par projet
  @@map("offres")
}

// Modèle pour les évaluations
model Evaluation {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  projetId        String @db.ObjectId
  evaluateurId    String @db.ObjectId // Donneur d'ordre
  evalueId        String @db.ObjectId // Sous-traitant
  
  // Notes (sur 5)
  noteQualite     Int    // 1-5
  noteDelai       Int    // 1-5
  noteCommunication Int  // 1-5
  noteGlobale     Float  // Moyenne calculée
  
  commentaire     String?
  recommande      Boolean @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  evaluateur User @relation("EvaluateurRelation", fields: [evaluateurId], references: [id], onDelete: Cascade)
  evalue     User @relation(fields: [evalueId], references: [id], onDelete: Cascade)
  projet     Projet @relation(fields: [projetId], references: [id], onDelete: Cascade)

  @@unique([projetId, evaluateurId, evalueId]) // Une seule évaluation par projet
  @@map("evaluations")
}

// Modèle pour la messagerie interne
model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projetId  String   @db.ObjectId
  offreId   String?  @db.ObjectId // Lié à une offre spécifique
  
  expediteurId    String @db.ObjectId
  destinataireId  String @db.ObjectId
  
  contenu         String
  lu              Boolean @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  expediteur      User   @relation("MessagesEnvoyes", fields: [expediteurId], references: [id], onDelete: Cascade)
  destinataire    User   @relation("MessagesRecus", fields: [destinataireId], references: [id], onDelete: Cascade)
  offre           Offre? @relation(fields: [offreId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Profil public détaillé pour les sous-traitants
model ContractorProfile {
  id                 String                   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String                   @unique @db.ObjectId
  displayName        String?
  bio                String?
  hourlyRate         Float?
  completedProjects  Int?                     @default(0)
  websites           String[]
  phonePublic        String?
  emailPublic        String?
  addressLine        String?
  city               String?
  postalCode         String?
  country            String?
  avatarUrl          String?
  avatarPublicId     String?
  verificationStatus PublicVerificationStatus?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  references Reference[]

  @@map("contractor_profiles")
}

// Références de chantiers (projets réalisés) affichées sur le profil public
model Reference {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  profileId   String             @db.ObjectId
  title       String
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  profile ContractorProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  media   ReferenceMedia[]

  @@map("references")
}

// Médias (images) liés à une référence
model ReferenceMedia {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  referenceId String    @db.ObjectId
  url         String
  publicId    String?
  title       String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  reference Reference @relation(fields: [referenceId], references: [id], onDelete: Cascade)

  @@map("reference_media")
}

// Demandes de contact
model Contact {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  nom         String
  prenom      String
  email       String
  telephone   String?
  entreprise  String?
  sujet       String
  message     String
  typeContact ContactType
  status      ContactStatus @default(NOUVEAU)
  
  // Métadonnées admin
  assignedTo  String?       @db.ObjectId
  adminNotes  String?
  priority    Int           @default(1) // 1=normal, 2=high, 3=urgent
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  resolvedAt  DateTime?
  
  // Relations
  assignedAdmin User? @relation(fields: [assignedTo], references: [id])

  @@map("contacts")
}

// Images/plans de projets
model ProjectImage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projetId    String   @db.ObjectId
  url         String
  publicId    String?  // Pour Cloudinary
  title       String?
  description String?
  type        String   @default("PHOTO") // PHOTO, PLAN, SCHEMA
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projet Projet @relation(fields: [projetId], references: [id], onDelete: Cascade)

  @@map("project_images")
}

// Demandes de contact
model ContactRequest {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  nom         String
  email       String
  telephone   String?
  sujet       String
  message     String
  status      ContactRequestStatus @default(PENDING)
  reponse     String?
  reponseAt   DateTime?
  reponseBy   String?       @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  reponseUser User? @relation(fields: [reponseBy], references: [id])

  @@map("contact_requests")
}
